// 배열을 선언하는 방법

let numArr: number[] = [1, 2, 3];

let strArr: string[] = ["hello", "im", "winterlood"];

let boolArr: Array<boolean> = [true, false, true];

// 배열에 들어가는 요소들의 타입이 다양할 경우
let multiArr: (number | string)[] = [1, "hello"];

// 다차원 배열의 타입을 정의하는 방법
let doubleArr: number[][] = [
	[1, 2, 3],
	[4, 5],
];

// 튜플 : 길이와 타입이 고정된 타입 (고정된 길이를 갖는 배열 타입을 정의)
// 자바스크립트에는 없는 타입스크립트의 특수한 타입으로 길이와 타입이 고정된 배열을 의미합니다.

let tup1: [number, number] = [1, 2]; // 길이가 2로 고정된 2개의 number 타입 요소를 갖는 튜플 정의
let tup2: [number, string, boolean] = [1, "hello", true]; // 다양한 타입을 갖는 튜플

// 튜플 사용하는 이유

// 1. 2차원 배열로 회원 정보 저장하는 중
const users = [
	["나나", 1],
	["이아무개", 2],
	["김아무개", 3],
	["박아무개", 4],
];

// 2. 누군가 순서를 반대로 배치해 문제가 생김
const users = [
	["나나", 1],
	["이아무개", 2],
	["김아무개", 3],
	["박아무개", 4],
	[5, "조아무개"], // <- 새로 추가함
];

// 3. 자바스크립트에서는 확인 할 방법이 없는데, 타입스크립트의 튜플을 사용하면 잘못된 배치 확인 가능
const users: [string, number][] = [
	["나나", 1],
	["이아무개", 2],
	["김아무개", 3],
	["박아무개", 4],
	[5, "조아무개"], // 오류 발생
];
